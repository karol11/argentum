using sys { SharedMap, SharedArray, String, Blob }
const xGet = "GET";
const xPost = "POST";
const xDelete = "DELETE";
const xPut = "PUT";

fn get(url-String, onEnd&(Response)) {
    Request.setUrl(url).execute(onEnd)
}
  
class Request {
    url = *"";
    verb = xGet;
    body = *Blob;
    headers = SharedArray(String); // Headers go in form "key: val". Array allows dup keys names and preserves order. 

    setUrl(val -String) this { url := *val }
    setVerb(val -String) this { verb := *val }
    setBody(val -Blob) this { body := *val }
    addHeader(val -String) this {
        at = headers.capacity();
        headers.insert(at, 1);
        headers[at] := *val
    }
    -execute(onEnd&(Response)) {
        executeRequestInternal(Response.setRequest(*this), onEnd)
    }
}
class Response {
    request = *Request;
    status = 0;
    headers = SharedMap(String, String);
    body = Blob;

    setRequest(val *Request) this { request := val }
}

// test simple() {
//	 get("http://aglang.org", app.&onGetAglangOrg(r Response){
//     log(`code=${r.status} size=${r.body.length}`)
//     r.headers.each(name val \ log(`header ${name}: ${val}{LF}`))
//   });
// }

fn executeRequestInternal(response Response, onEnd&(Response));

const xInternalHttpClient = (*HttpClient).start();
class HttpClient {
    *start() this;
}
fn disposeHttpClient(client HttpClient);
