using sys { String }
using sdlFfi;

const xEventQuit = 256;
const xRendererAccelerated = 2;
const xImgJpg = 1;
const xImgPng = 2;
const xInitEverything = 0x7231;
const xDefaultPos = 0x1FFF0000;

//
// High level safe API
//
class Sdl {
    initVideo() bool {
        sdlFfi_sdlInit(xInitEverything) == 0 &&
        sdlFfi_imgInit(xImgJpg | xImgPng) != 0
    }
    eventLoop(handler (Event)) {
        e = Event;
        loop{
            sdlFfi_pollEvent(e);
            handler(e);
            sdlFfi_delay(1000/30);
            e[0] == xEventQuit
        }
    }
}
fn disposeSdl(sdl Sdl) {
    sdlFfi_imgQuit();
    sdlFfi_sdlQuit();
}

class Window {
    handle = 0;
    renderer = 0;
    createCentered(title -String, w int, h int) bool {
        destroyWindow(this);
        handle := sdlFfi_createWindow(title, xDefaultPos, xDefaultPos, w, h, 0);
        renderer := handle == 0 ? 0 : sdlFfi_createRenderer(handle, -1, xRendererAccelerated);
        renderer != 0
    }
    fill(color int) {
        renderer != 0 ? {
            sdlFfi_setRendererDrawColor(renderer, color, color >> 8, color >> 16, color >> 24);
            sdlFfi_rendererClear(renderer)
        }
    }
    fillRect(x int, y int, w int, h int, color int) {
        renderer != 0 ? {
            sdlFfi_setRendererDrawColor(renderer, color, color >> 8, color >> 16, color >> 24);
            sdlFfi_rendererFillRect(renderer, x, y, w, h);
        }
    }
    blt(tex Texture, sx int, sy int, sw int, sh int, dx int, dy int, dw int, dh int){
        renderer != 0 && tex.id != 0 ?
            sdlFfi_blt(renderer, tex.id, sx, sy, sw, sh, dx, dy, dw, dh);
    }
    flip() {
        renderer != 0 ? sdlFfi_rendererPresent(renderer);
    }
}
fn destroyWindow(w Window) {
    w.renderer != 0 ? sdlFfi_destroyRenderer(w.renderer);
    w.handle != 0 ? sdlFfi_destroyWindow(w.handle);
}
fn afterCopyWindow(w Window) { w.handle := w.renderer := 0 }

class Event {
    +sys_Blob;
    getAt(i int) int { get32At(i) }
}

class Texture{
    id = 0;
    init(wnd Window, fileName -String) bool {
        wnd.renderer != 0 && {
            surface = sdlFfi_imgLoad(fileName);
            surface != 0 && {
                disposeTexture(this);
                id := sdlFfi_createTextureFromSurface(wnd.renderer, surface);
                sdlFfi_freeSurface(surface);
                id != 0
            }
        }
    }
    setAlphaMod(multiplier int) {
        id != 0 ? sdlFfi_setTextureAlphaMod(id, multiplier);
    }
    setColorMod(color int) {
        id != 0 ? sdlFfi_setTextureColorMod(id, color);
    }
}
fn disposeTexture(t Texture) {
    t.id != 0 ? sdlFfi_destroyTexture(t.id)
}
