using sys {
    String,
    Blob,
    StrBuilder,
    Array
}
using array;

class String {
    // Case sensitive comparison
    -equalsCS(other -String) bool {
        a = @this;
        b = @other;
        loop {
            aChar = a.getCh();
            bChar = b.getCh();
            aChar != bChar ? ^equalsCS=false;
            aChar != 0 && bChar != 0 ? true
        }
    }
    getTill(separator int) ?@String {
        peekCh() != 0 ? {
            r = StrBuilder;
            loop !{
                c = getCh();
                c != separator && c != 0 ? r.putCh(c)
            };
            r.toStr()
        }
    }
    -split(delimiter int) @Array(String) {
        res = Array(String);
        text = @this;
        loop !(text.getTill(delimiter) ? res.append(@_));
        res
    }
}

class StrBuilder {
    pos = 0;
    reserve(bytes int) {
        size = capacity();
        pos + bytes >= size ?
            insert(size, size * 2 + 4 + bytes);
    }
    putCh(codePoint int) this {
        reserve(8);
        pos := putChAt(pos, codePoint)
    }
    putStr(fs -String) this {
        s = @fs;
        loop !{
            c = s.getCh();
            c != 0 ? putCh(c)
        }
    }
    putOptStr(s ?-String) this { s ? putStr(_) }
    putInt(val int) this {
        reserve(22);
        isNeg = val < 0;
        isNeg ? val *= -1;
        p = pos + 21;
        loop {
            set8At(p -= 1, (val % 10)->{_<0?-_:_} + '0');
            (val /= 10) == 0
        };
        isNeg ? set8At(p -= 1, '-');
        copy(pos, this, p, pos + 21 - p);
        pos += pos + 21 - p;
    }
    newLine() this {
        putCh(0x0a);
    }
    toStr() @String {
        r = String;
        r.fromBlob(this, 0, pos);
        pos := 0;
        r
    }
}
