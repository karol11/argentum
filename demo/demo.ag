using sdl { Window, Sdl, Texture }
using utils { Random, forRange }
using gui { Actor, Group }

class Scene{
    +Group;

    sdl = Sdl;
    w = Window;
    rnd = Random;
    flare = Texture;
    star = Texture;
    background = Texture;
    foreground = Texture;

    init() ?Scene {
        sdl.initVideo() &&
        w.createCentered("Hello from Argentum!", 800, 600) &&
        background.init(w, "back.jpg") &&
        foreground.init(w, "fore.png") &&
        flare.init(w, "round.png") &&
        star.init(w, "star.png") ? this
    }
    run() {
        push(10, Flare.initAtBottom(this));
        sdl.eventLoop() e {
            w.blt(background, 0, 0, 800, 600, 0, 0, 800, 600);
            paint(w);
            w.blt(foreground, 0, 0, 800, 600, 0, 0, 800, 600);
            w.flip();
            rnd.get(0, (size() / 2) + 1) == 0 ?
                append(Flare.initAtBottom(this));
            tick(1000/30);
        }
    }
}

class Flare {
    +Actor {
        paint(dst Window) {
            sprite? {
                _.setColorMod(color);
                _.setAlphaMod(fade >> 8);
                size = fade >> 8 >> 2;
                dst.blt(_, 0, 0, 64, 64, x >> 16 - size/2, y >> 16 - size/2, size, size);
            }
        }
        tick(milliseconds int) bool {
            x += dx;
            y += dy;
            dy += 1 << 13;
            scene ?=sc sc.rnd.get(0, 2) == 0 ?
                sc.append(Sparkles.init(sc, x >> 16, y >> 16, color));
            fade += dFade;
            dFade -= 140;
            fade == 0 && scene &&=s s.rnd.get(0, generation) == 0 ?
                distributeInCircle(s.rnd, s.rnd.get(6, 15), 10 << 16) dx dy {
                    s.append(Flare.initAtFlare(this, dx, dy));
                };
            y > -100 << 16 && y <= 600 << 16 && x > 0 && x < 800 << 16 && fade >= 0
        }
    }
    initAtFlare(parent Flare, dx int, dy int) this {
        scene := parent.scene;
        scene? sprite := &_.star; 
        x := parent.x;
        y := parent.y;
        color := parent.color;
        generation := parent.generation + 2;
        this.dx := dx;
        this.dy := dy;
    }
    initAtBottom(scene Scene) this {
        this.scene := &scene;
        r = scene.rnd;
        x := r.get(200 << 16, (800-200) << 16);
        dx := r.get(-x / 30, (800 << 16 - x) / 30);
        dy := r.get(-18 << 16, -8 << 16);
        sprite := &scene.flare;
        color := makeBrightColor(r);
    }
    scene = &Scene;
    x = 0;
    dx = 0;
    fade = 0;
    dFade = 4200;
    y = 600 << 16;
    dy = -10 << 16;
    color = 0xff_ff_ff;
    generation = 1;
    sprite = &Texture;
}

class Sparkles {
    +Actor {
        paint(dst Window) {
            scene? distributeInCircle(_.rnd, r, r) x y {
                dst.fillRect(this.x + x, this.y + y, 1, 1, color);
            }
        }
        tick(milliseconds int) bool { (r -= 1) > 0 }
    }
    init(scene Scene, x int, y int, color int) this {
        this.scene := &scene;
        this.x := x;
        this.y := y;
        this.color := color;
    }
    scene = &Scene;
    x = 0;
    y = 0;
    r = 30;
    color = 0;
}

fn makeBrightColor(rnd Random) int {
    b = rnd.get(2, 0xff);
    r = rnd.get(2, 0xff);
    g = rnd.get(0xff - (b + r)/2, 0xff);
    b << 16 + g << 8 + r
}

fn distributeInCircle(rnd Random, count int, r int, callback (int, int)) {
    forRange(0, count) i {
        x = rnd.get(-r, r);
        y = rnd.get(-r, r);
        x*x + y*y < r*r ? callback(x, y);
    };
}

Scene.init()?_.run();
