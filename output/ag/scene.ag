using sys { Object, Array, nowMs }
using sdl { Sdl, Rect, Texture, Window, Font }
using utils { forRange }
using array;

class Scene {
    +Window;
    initScene(title str, w short, h short) {
        sdl.init(sdl_xInitEverything, sdl_xImgJpg | sdl_xImgPng );
        init(title, Rect.xywh(sdl_xDefaultPos, sdl_xDefaultPos, w, h), 0s, sdl_xRendererAccelerated);
        clip.xywh(0s, 0s, w, h);
    }
    nextFrame() {
        frameStartMs = nowMs();
        loop !(sdl.pollEvent() ? `event {
            event[0] == sdl_xEventQuit ? sys_setMainObject(?sys_Object);
        });
        roots.each\_.render();
        flip();
        animators.plow\_.step(1000/60);
        sys_postTimer(frameStartMs + 1000/120, this.nextFrame);
    }
    x = 0s;
    y = 0s;
    opacity = 255s;
//    scaleX = 0x1_0000;
//    scaleY = 0x1_0000;
    clip = Rect;
    roots = Array(Item);
    animators = Array(Animator);
    sdl = Sdl;
}

class Animator {
    step(deltaMs int) bool { false }
}

class DelayAnimator{
    +Animator{
        step(deltaMs int) bool {
            dur -= deltaMs;
            dur <= 0 ? handler();
            dur > 0
        }
    }
    init(durationMs int, onEnd&()) {
        dur := durationMs;
        handler := onEnd;
    }
    handler = Object.&dummyVoid(){};
    dur = 0;
}

class XYAnimator {
    +Animator{
        step(deltaMs int) bool {
            isInProgress = dur > deltaMs;
            isInProgress ? {
                dur -= deltaMs;
                setter(
                    dstX - short(dur * xs >> 32),
                    dstY - short(dur * ys >> 32));
            } : {
                setter(dstX, dstY);
            };
            isInProgress
        }
    }
    setter = Object.&dummyXY(x short, y short){};
    xs = 0;
    ys = 0;
    dstX = 0s;
    dstY = 0s;
    dur = 0;
    init(startX short, startY short, endX short, endY short, durationMs int, setter&(short, short)) this {
        xs := int(endX - startX) << 32 / durationMs;
        ys := int(endY - startY) << 32 / durationMs;
        dstX := endX;
        dstY := endY;
        dur := durationMs;
        this.setter := setter;
    }
}

class ArgbAnimator {
    +Animator{
        step(deltaMs int) bool {
            isInProgress = dur > deltaMs;
            isInProgress ? {
                dur -= deltaMs;
                a = dstA - short(dur * as >> 32);
                r = dstR - short(dur * rs >> 32);
                g = dstG - short(dur * gs >> 32);
                b = dstB - short(dur * bs >> 32);
                setter((a << 24s) | (r << 16s) | (g << 8s) | b);
            } : {
                setter((dstA << 24s) | (dstR << 16s) | (dstG << 8s) | dstB);
            };
            isInProgress
        }
    }
    setter = Object.&dummyARGB(argb short){};
    as = 0;
    rs = 0;
    gs = 0;
    bs = 0;
    dstA = 0s;
    dstR = 0s;
    dstG = 0s;
    dstB = 0s;
    dur = 0;
    init(start short, end short, durationMs int, setter&(short)) this {
        dstA := end >> 24s & 0xffs;
        dstR := end >> 16s & 0xffs;
        dstG := end >> 8s & 0xffs;
        dstB := end & 0xffs;
        as := int(dstA - start >> 24s & 0xffs) << 32 / durationMs;
        rs := int(dstR - start >> 16s & 0xffs) << 32 / durationMs;
        gs := int(dstG - start >> 8s & 0xffs) << 32 / durationMs;
        bs := int(dstB - start & 0xffs) << 32 / durationMs;
        dur := durationMs;
        this.setter := setter;
    }
}

class ValAnimator {
    +Animator{
        step(deltaMs int) bool {
            isInProgress = dur > deltaMs;
            isInProgress ? {
                dur -= deltaMs;
                setter(end - short(dur * scaler >> 32));
            } : {
                setter(end);
            };
            isInProgress
        }
    }
    setter = Object.&dummyV(v short){};
    end = 0s;
    scaler = 0;
    dur = 0;
    init(startV short, endV short, durationMs int, setter&(short)) this {
        end := endV;
        dur := durationMs;
        scaler = int(endV - startV) << 32 / durationMs;
        this.setter := setter;
    }
}

class Modifier{
    do(c Scene){}
    undo(c Scene){}
}

class Opacity {
    +Modifier {
        do(c Scene) {
            saved := c.opacity;
            c.opacity := c.opacity * val >> 8s;
        }
        undo(c Scene) {
            c.opacity := saved;
        }
    }
    set(v short) this { val := v }
    animate(s Scene, dst short, durationMs int) this {
        s.animators.append(ValAnimator.init(val, dst, durationMs, this.&opacitySetter(v short){
            val := v;
        }))
    } 
    val = 255s;
    saved = 0s;
}

class Clip {
    +Modifier{
        do(s Scene) {}
        undo(s Scene) {}
    }
    r = Rect;
    set(x short, y short, w short, h short) { r.xywh(x, y, w, h) }
    // animate(s Scene, )
}

class Item{
    render() {}
    x = 0s;
    y = 0s;
    scene = &Scene;
    call(s Scene) this { scene := &s }
    setPos(x short, y short) this {
        this.x := x;
        this.y := y;
    }
    animatePos(dx short, dy short, durMs int) this {
        scene?_.animators.append(XYAnimator.init(x, y, dx, dy, durMs, this.&posSetter(vx short, vy short){
            x := vx;
            y := vy;    
        }))
    }
}

class Image{
    +Item{
        render() {
            scene ?
                bltRect(_,
                    0s, 0s, img.w, img.h,
                    0s, 0s, img.w, img.h,
                    color >> 24s * _.opacity >> 8s << 24s | (color & 0xff_ff_ffs));
        }
    }
    bltRect(s Scene, srcX short, srcY short, srcW short, srcH short, dstX short, dstY short, dstW short, dstH short, color short) {
        s.bltXYWH(img,
            srcX, srcY, srcW, srcH,
            x + s.x + dstX,
            y + s.y + dstY,
            dstW, dstH,
            color);
    }
    load(name str) this {
        scene?_.loadTexture(name) ? img := _;
    }
    texture(t *Texture) this { img := t }
    setColor(c short) this { color := c }
    animateColor(dst short, durationMs int) this {
        scene?_.animators.append(ArgbAnimator.init(color, dst, durationMs, this.&colorSetter(v short){
            color := v;
        }))
    }

    color = 0xff_ff_ff_ffs;
    img = *Texture;
}

class Label{
    +Image;
    init(font *Font, size short, style short, text str) this {
        this.font := font;
        this.size := size;
        this.style := style;
        setText(text);
    }
    setText(text str) {
        this.text := text;
        img := font.render(text, size, style);
    }
    font = *Font;
    size = 14s;
    style = 0s;
    text = "";
}

class Frame{
    +Image {
        render() {
            scene ? {
                c = color >> 24s * _.opacity >> 8s << 24s | (color & 0xff_ff_ffs);
                w = maxI32(width, img.w);
                h = maxI32(height, img.h);
                srcLastX = img.w - right;
                dstLastX = w - right;
                srcLastY = img.h - bottom;
                dstLastY = h - bottom;
                srcMiddleW = srcLastX - left;
                srcMiddleH = srcLastY - top;
                dstMiddleW = dstLastX - left;
                dstMiddleH = dstLastY - top;

                bltRect(_, 0s,       0s, left,       top, 0s,       0s, left,       top, c);
                bltRect(_, left,     0s, srcMiddleW, top, left,     0s, dstMiddleW, top, c);
                bltRect(_, srcLastX, 0s, right,      top, dstLastX, 0s, right,      top, c);

                bltRect(_, 0s,       top, left,       srcMiddleH, 0s,       top, left,       dstMiddleH, c);
                bltRect(_, left,     top, srcMiddleW, srcMiddleH, left,     top, dstMiddleW, dstMiddleH, c);
                bltRect(_, srcLastX, top, right,      srcMiddleH, dstLastX, top, right,      dstMiddleH, c);

                bltRect(_, 0s,       srcLastY, left,       bottom, 0s,       dstLastY, left,       bottom, c);
                bltRect(_, left,     srcLastY, srcMiddleW, bottom, left,     dstLastY, dstMiddleW, bottom, c);
                bltRect(_, srcLastX, srcLastY, right,      bottom, dstLastX, dstLastY, right,      bottom, c);
            }
        }
    }
    init(fileName str, leftWidth short, topWidth short, rightWidth short, bottomWidth short) this {
        load(fileName);
        left := leftWidth;
        right := rightWidth;
        top := topWidth;
        bottom := bottomWidth;
    }
    setSize(w short, h short) this {
        width := w;
        height := h;
    }
    animateSize(dstW short, dstH short, durationMs int) this {
        scene?_.animators.append(XYAnimator.init(width, height, dstW, dstH, durationMs, this.&setFrameSize(w short, h short){
            width := w;
            height := h;
        }));
    }
    width = 0s;
    height = 0s;

    left = 0s;
    top = 0s;
    right = 0s;
    bottom = 0s;
}

class Group {
    +Item {
        render() {
            scene ?`c {
                c.x += x;
                c.y += y;
                modifiers.each\_.do(c);
                items.each\_.render();
                forRange(-modifiers.size(), 0){ modifiers[1 + _] ? _.undo(c) };
                c.x -= x;
                c.y -= y;    
            }
        }
    }
    add(item ()@Item) this {
        items.append(item())
    }
    addModifier(m ()@Modifier) this {
        modifiers.append(m())
    }
    items = Array(Item);
    modifiers = Array(Modifier);
}

fn maxI32(a short, b short) short { a > b ? a : b }
