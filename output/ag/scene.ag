using sys { Object, Array, nowMs }
using sdl { Sdl, Rect, Texture, Window, Font }
using utils { forRange }
using array;

class Scene {
    +Window;
    initScene(title str, w int, h int) {
        sdl.init(sdl_xInitEverything, sdl_xImgJpg | sdl_xImgPng );
        init(title, Rect.xywh(sdl_xDefaultPos, sdl_xDefaultPos, w, h), 0, sdl_xRendererAccelerated);
        clip.xywh(0, 0, w, h);
    }
    nextFrame() {
        frameStartMs = nowMs();
        loop !(sdl.pollEvent() ? {
            _[0] == sdl_xEventQuit ? sys_setMainObject(?sys_Object);
        });
        roots.each\_.render();
        flip();
        animators.plow\_.step(1000/60);
        sys_postTimer(frameStartMs + 1000/60, this.nextFrame);
    }
    x = 0;
    y = 0;
    opacity = 255;
//    scaleX = 0x1_0000;
//    scaleY = 0x1_0000;
    clip = Rect;
    roots = Array(Item);
    animators = Array(Animator);
    sdl = Sdl;
}

class Animator {
    step(deltaMs int) bool { false }
}

class DelayAnimator{
    +Animator{
        step(deltaMs int) bool {
            dur -= deltaMs;
            dur <= 0 ? handler();
            dur > 0
        }
    }
    init(durationMs int, onEnd&()) {
        dur := durationMs;
        handler := onEnd;
    }
    handler = Object.&dummyVoid(){};
    dur = 0;
}

class XYAnimator {
    +Animator{
        step(deltaMs int) bool {
            isInProgress = dur > deltaMs;
            isInProgress ? {
                dur -= deltaMs;
                setter(
                    dstX - dur * xs >> 32,
                    dstY - dur * ys >> 32);
            } : setter(dstX, dstY);
            isInProgress
        }
    }
    setter = Object.&dummyXY(x int, y int){};
    xs = 0;
    ys = 0;
    dstX = 0;
    dstY = 0;
    dur = 0;
    init(startX int, startY int, endX int, endY int, durationMs int, setter&(int, int)) this {
        xs := (endX - startX) << 32 / durationMs;
        ys := (endY - startY) << 32 / durationMs;
        dstX := endX;
        dstY := endY;
        dur := durationMs;
        this.setter := setter;
    }
}

class ArgbAnimator {
    +Animator{
        step(deltaMs int) bool {
            isInProgress = dur > deltaMs;
            isInProgress ? {
                dur -= deltaMs;
                a = dstA - dur * as >> 32;
                r = dstR - dur * rs >> 32;
                g = dstG - dur * gs >> 32;
                b = dstB - dur * bs >> 32;
                setter((a << 24) | (r << 16) | (g << 8) | b);
            } : setter((dstA << 24) | (dstR << 16) | (dstG << 8) | dstB);
            isInProgress
        }
    }
    setter = Object.&dummyARGB(argb int){};
    as = 0;
    rs = 0;
    gs = 0;
    bs = 0;
    dstA = 0;
    dstR = 0;
    dstG = 0;
    dstB = 0;
    dur = 0;
    init(start int, end int, durationMs int, setter&(int)) this {
        dstA := end >> 24 & 0xff;
        dstR := end >> 16 & 0xff;
        dstG := end >> 8 & 0xff;
        dstB := end & 0xff;
        as := (dstA - start >> 24 & 0xff) << 32 / durationMs;
        rs := (dstR - start >> 16 & 0xff) << 32 / durationMs;
        gs := (dstG - start >> 8 & 0xff) << 32 / durationMs;
        bs := (dstB - start & 0xff) << 32 / durationMs;
        dur := durationMs;
        this.setter := setter;
    }
}

class ValAnimator {
    +Animator{
        step(deltaMs int) bool {
            isInProgress = dur > deltaMs;
            isInProgress ? {
                dur -= deltaMs;
                setter(end - dur * scaler >> 32);
            } : setter(end);
            isInProgress
        }
    }
    setter = Object.&dummyV(v int){};
    end = 0;
    scaler = 0;
    dur = 0;
    init(startV int, endV int, durationMs int, setter&(int)) this {
        end := endV;
        dur := durationMs;
        scaler = (endV - startV) << 32 / durationMs;
        this.setter := setter;
    }
}

class Modifier{
    do(c Scene){}
    undo(c Scene){}
}

class Opacity {
    +Modifier {
        do(c Scene) {
            saved := c.opacity;
            c.opacity := c.opacity * val >> 8;
        }
        undo(c Scene) {
            c.opacity := saved;
        }
    }
    set(v int) this { val := v }
    animate(s Scene, dst int, durationMs int) this {
        s.animators.append(ValAnimator.init(val, dst, durationMs, this.&opacitySetter(v int){
            val := v;
        }))
    } 
    val = 255;
    saved = 0;
}

class Clip {
    +Modifier{
        do(s Scene) {}
        undo(s Scene) {}
    }
    r = Rect;
    set(x int, y int, w int, h int) { r.xywh(x, y, w, h) }
    // animate(s Scene, )
}

class Item{
    render() {}
    x = 0;
    y = 0;
    scene = &Scene;
    call(s Scene) this { scene := &s }
    setPos(x int, y int) this {
        this.x := x;
        this.y := y;
    }
    animatePos(dx int, dy int, durMs int) this {
        scene?_.animators.append(XYAnimator.init(x, y, dx, dy, durMs, this.&posSetter(vx int, vy int){
            x := vx;
            y := vy;    
        }))
    }
}

class Image{
    +Item{
        render() {
            scene ?
                bltRect(_,
                    0, 0, img.w, img.h,
                    0, 0, img.w, img.h,
                    color >> 24 * _.opacity >> 8 << 24 | (color & 0xff_ff_ff));
        }
    }
    bltRect(s Scene, srcX int, srcY int, srcW int, srcH int, dstX int, dstY int, dstW int, dstH int, color int) {
        s.bltXYWH(img,
            srcX, srcY, srcW, srcH,
            x + s.x + dstX,
            y + s.y + dstY,
            dstW, dstH,
            color);
    }
    load(name str) this {
        scene?_.loadTexture(name) ? img := _;
    }
    texture(t *Texture) this { img := t }
    setColor(c int) this { color := c }
    animateColor(dst int, durationMs int) this {
        scene?_.animators.append(ArgbAnimator.init(color, dst, durationMs, this.&colorSetter(v int){
            color := v;
        }))
    }

    color = 0xff_ff_ff_ff;
    img = *Texture;
}

class Label{
    +Image;
    init(font *Font, size int, style int, text str) this {
        this.font := font;
        this.size := size;
        this.style := style;
        setText(text);
    }
    setText(text str) {
        this.text := text;
        img := font.render(text, size, style);
    }
    font = *Font;
    size = 14;
    style = 0;
    text = "";
}

class Frame{
    +Image {
        render() {
            scene ? {
                c = color >> 24 * _.opacity >> 8 << 24 | (color & 0xff_ff_ff);
                w = max(width, img.w);
                h = max(height, img.h);
                srcLastX = img.w - right;
                dstLastX = w - right;
                srcLastY = img.h - bottom;
                dstLastY = h - bottom;
                srcMiddleW = srcLastX - left;
                srcMiddleH = srcLastY - top;
                dstMiddleW = dstLastX - left;
                dstMiddleH = dstLastY - top;

                bltRect(_, 0,        0, left,       top, 0,        0, left,       top, c);
                bltRect(_, left,     0, srcMiddleW, top, left,     0, dstMiddleW, top, c);
                bltRect(_, srcLastX, 0, right,      top, dstLastX, 0, right,      top, c);

                bltRect(_, 0,        top, left,       srcMiddleH, 0,        top, left,       dstMiddleH, c);
                bltRect(_, left,     top, srcMiddleW, srcMiddleH, left,     top, dstMiddleW, dstMiddleH, c);
                bltRect(_, srcLastX, top, right,      srcMiddleH, dstLastX, top, right,      dstMiddleH, c);

                bltRect(_, 0,        srcLastY, left,       bottom, 0,        dstLastY, left,       bottom, c);
                bltRect(_, left,     srcLastY, srcMiddleW, bottom, left,     dstLastY, dstMiddleW, bottom, c);
                bltRect(_, srcLastX, srcLastY, right,      bottom, dstLastX, dstLastY, right,      bottom, c);
            }
        }
    }
    init(fileName str, leftWidth int, topWidth int, rightWidth int, bottomWidth int) this {
        load(fileName);
        left := leftWidth;
        right := rightWidth;
        top := topWidth;
        bottom := bottomWidth;
    }
    setSize(w int, h int) this {
        width := w;
        height := h;
    }
    animateSize(dstW int, dstH int, durationMs int) this {
        scene?_.animators.append(XYAnimator.init(width, height, dstW, dstH, durationMs, this.&setFrameSize(w int, h int){
            width := w;
            height := h;
        }));
    }
    width = 0;
    height = 0;

    left = 0;
    top = 0;
    right = 0;
    bottom = 0;
}

class Group {
    +Item {
        render() {
            scene ?`c {
                c.x += x;
                c.y += y;
                modifiers.each\_.do(c);
                items.each\_.render();
                forRange(-modifiers.size(), 0) \ modifiers[1 + _] ? _.undo(c);
                c.x -= x;
                c.y -= y;    
            }
        }
    }
    add(item ()@Item) this {
        items.append(item())
    }
    addModifier(m ()@Modifier) this {
        modifiers.append(m())
    }
    items = Array(Item);
    modifiers = Array(Modifier);
}

fn max(a int, b int) int { a > b ? a : b }
